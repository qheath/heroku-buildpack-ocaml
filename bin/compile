#!/usr/bin/env bash
# bin/compile <build_dir> <cache_dir> <env_dir>

set -e
set -o pipefail

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

echo "BUILD_DIR: $BUILD_DIR"
echo "CACHE_DIR: $CACHE_DIR"
echo "ENV_DIR: $ENV_DIR"

#ocaml_url=http://49.212.130.159:5963/heroku/ocaml-4.01.0-bin.tgz
#opam_url=http://49.212.130.159:5963/heroku/opam-1.1.0-bin.tgz
#
#function indent() {
#  c='s/^/       /'
#  case $(uname) in
#    Darwin) sed -l "$c";;
#    *)      sed -u "$c";;
#  esac
#}
#
#function setup() {
#  dir=$1
#  url=$2
#
#  cache=$CACHE_DIR/cache/$(basename $url)
#
#  mkdir -p $dir
#  mkdir -p $CACHE_DIR/cache
#
#  if [ -f $cache ]; then
#    echo "skipping ${url}, using to ${cache}"
#     tar -zxf "${cache}" -C "${dir}"
#  else
#    echo "fetching ${url} to ${dir}"
#    curl -L "${url}" -o - | tee "${cache}" | tar -zxf - -C "${dir}"
#  fi
#}
#
#cd $BUILD_DIR
#
#if [ -f .no_cache ]; then
#  echo "-----> Cleanup cache"
#  rm -rf $CACHE_DIR
#fi
#
#echo "-----> Fetching OCaml binaries"
#setup /app $ocaml_url
#export PATH="/app/vendor/ocaml/bin:$PATH"
##setup /app/vendor/ocaml $ocaml_url
#
#echo "-----> Fetching OPAM"
#setup /app  $opam_url
#export PATH="/app/vendor/opam/bin:$PATH"
#export CAML_LD_LIBRARY_PATH=/app/vendor/opam-lib/system/lib/stublibs:/app/vendor/ocaml/lib/ocaml/stublibs
##setup /app/vendor/opam $opam_url
#
##echo "-----> Setup env"
##export LD_PRELOAD=/app/vendor/pcre/lib/libpcre.so.1
##export PKG_CONFIG_PATH=/app/vendor/pcre/lib/pkgconfig:/app/vendor/sqlite3/lib/pkgconfig:$PKG_CONFIG_PATH
##export PATH=/app/vendor/pcre/bin:/app/vendor/sqlite3/bin:$PATH
#
## export OPAMROOT=/app/vendor/opam-lib
## export OCAML_TOPLEVEL_PATH=/app/vendor/opam-lib/system/lib/toplevel
## export PATH=/app/vendor/opam-lib/system/bin:$PATH
#
### configure
##if [ -f configure ]; then
##  echo "-----> Configuring"
##  ./configure 2>&1 | indent
##fi
#
## make
#echo "-----> Compiling with Make"
#make all 2>&1 | indent
#
##echo "-----> Install runtime environment"
##copy vendor
